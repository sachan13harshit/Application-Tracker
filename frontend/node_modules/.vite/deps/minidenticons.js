import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField
} from "./chunk-DWA4UIM3.js";

// node_modules/minidenticons/minidenticons.js
var COLORS_NB = 9;
var DEFAULT_SATURATION = 95;
var DEFAULT_LIGHTNESS = 45;
var MAGIC_NUMBER = 5;
function simpleHash(str) {
  return str.split("").reduce((hash, char) => (hash ^ char.charCodeAt(0)) * -MAGIC_NUMBER, MAGIC_NUMBER) >>> 2;
}
function minidenticon(seed = "", saturation = DEFAULT_SATURATION, lightness = DEFAULT_LIGHTNESS, hashFn = simpleHash) {
  const hash = hashFn(seed);
  const hue = hash % COLORS_NB * (360 / COLORS_NB);
  return [...Array(seed ? 25 : 0)].reduce(
    (acc, e, i) => (
      // testing the 15 lowest weight bits of the hash
      hash & 1 << i % 15 ? acc + `<rect x="${i > 14 ? 7 - ~~(i / 5) : ~~(i / 5)}" y="${i % 5}" width="1" height="1"/>` : acc
    ),
    // xmlns attribute added in case of SVG file generation https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg#sect1
    `<svg viewBox="-1.5 -1.5 8 8" xmlns="http://www.w3.org/2000/svg" fill="hsl(${hue} ${saturation}% ${lightness}%)">`
  ) + "</svg>";
}
var _a, _b, _memoized, _isConnected, _MinidenticonSvg_instances, setContent_fn, _c;
var minidenticonSvg = (
  // declared as a pure function to be tree-shaken by the bundler
  ((_a = globalThis.customElements) == null ? void 0 : _a.get("minidenticon-svg")) ? null : (_c = globalThis.customElements) == null ? void 0 : _c.define(
    "minidenticon-svg",
    (_b = class extends HTMLElement {
      constructor() {
        super(...arguments);
        __privateAdd(this, _MinidenticonSvg_instances);
        __privateAdd(this, _isConnected, false);
      }
      connectedCallback() {
        __privateMethod(this, _MinidenticonSvg_instances, setContent_fn).call(this);
        __privateSet(this, _isConnected, true);
      }
      // attributeChangedCallback() is called for every observed attribute before connectedCallback()
      attributeChangedCallback() {
        if (__privateGet(this, _isConnected)) __privateMethod(this, _MinidenticonSvg_instances, setContent_fn).call(this);
      }
    }, _memoized = new WeakMap(), _isConnected = new WeakMap(), _MinidenticonSvg_instances = new WeakSet(), setContent_fn = function() {
      var _a2;
      const args = _b.observedAttributes.map((key) => this.getAttribute(key) || void 0);
      const memoKey = args.join(",");
      this.innerHTML = (_a2 = __privateGet(_b, _memoized))[memoKey] ?? (_a2[memoKey] = // @ts-ignore
      minidenticon(...args));
    }, __publicField(_b, "observedAttributes", ["username", "saturation", "lightness"]), // private fields to allow Terser mangling
    __privateAdd(_b, _memoized, {}), _b)
  )
);
export {
  minidenticon,
  minidenticonSvg
};
//# sourceMappingURL=minidenticons.js.map
